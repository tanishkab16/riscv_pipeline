$date
	Mon Jul 28 13:19:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 1 ! zero_o $end
$var wire 32 " alu_result_o [31:0] $end
$var parameter 4 # ALU_ADD $end
$var parameter 4 $ ALU_AND $end
$var parameter 4 % ALU_COPY_B $end
$var parameter 4 & ALU_OR $end
$var parameter 4 ' ALU_SLL $end
$var parameter 4 ( ALU_SLT $end
$var parameter 4 ) ALU_SLTU $end
$var parameter 4 * ALU_SRA $end
$var parameter 4 + ALU_SRL $end
$var parameter 4 , ALU_SUB $end
$var parameter 4 - ALU_XOR $end
$var reg 4 . alu_op_i [3:0] $end
$var reg 32 / op1_i [31:0] $end
$var reg 32 0 op2_i [31:0] $end
$scope module DUT $end
$var wire 4 1 alu_op_i [3:0] $end
$var wire 32 2 op1_i [31:0] $end
$var wire 32 3 op2_i [31:0] $end
$var parameter 4 4 ALU_ADD $end
$var parameter 4 5 ALU_AND $end
$var parameter 4 6 ALU_COPY_B $end
$var parameter 4 7 ALU_OR $end
$var parameter 4 8 ALU_SLL $end
$var parameter 4 9 ALU_SLT $end
$var parameter 4 : ALU_SLTU $end
$var parameter 4 ; ALU_SRA $end
$var parameter 4 < ALU_SRL $end
$var parameter 4 = ALU_SUB $end
$var parameter 4 > ALU_XOR $end
$var reg 32 ? alu_result_o [31:0] $end
$var reg 1 ! zero_o $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 >
b1 =
b110 <
b111 ;
b1001 :
b1000 9
b101 8
b11 7
b1111 6
b10 5
b0 4
b100 -
b1 ,
b110 +
b111 *
b1001 )
b1000 (
b101 '
b11 &
b1111 %
b10 $
b0 #
$end
#0
$dumpvars
b0 ?
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 "
1!
$end
#10
0!
b1111 "
b1111 ?
b101 0
b101 3
b1010 /
b1010 2
#20
1!
b0 "
b0 ?
b1 .
b1 1
b10100 0
b10100 3
b10100 /
b10100 2
#30
1!
b0 "
b0 ?
b10 .
b10 1
b111100001111 0
b111100001111 3
b1111000011110000 /
b1111000011110000 2
#40
0!
b1111111111111111 "
b1111111111111111 ?
b11 .
b11 1
#50
b11111111111111111111111111111111 "
b11111111111111111111111111111111 ?
b100 .
b100 1
b1011010010110100101101001011010 0
b1011010010110100101101001011010 3
b10100101101001011010010110100101 /
b10100101101001011010010110100101 2
#60
b111100 "
b111100 ?
b101 .
b101 1
b10 0
b10 3
b1111 /
b1111 2
#70
b1000000000000000000000000000000 "
b1000000000000000000000000000000 ?
b110 .
b110 1
b1 0
b1 3
b10000000000000000000000000000000 /
b10000000000000000000000000000000 2
#80
b11111111111111111111111111111111 "
b11111111111111111111111111111111 ?
b111 .
b111 1
b11111111111111111111111111111110 /
b11111111111111111111111111111110 2
#90
b1 "
b1 ?
b1000 .
b1000 1
b1010 0
b1010 3
b101 /
b101 2
#100
1!
b0 "
b0 ?
b101 0
b101 3
b1010 /
b1010 2
#110
0!
b1 "
b1 ?
b0 0
b0 3
b11111111111111111111111111111111 /
b11111111111111111111111111111111 2
#120
1!
b0 "
b0 ?
b1001 .
b1001 1
#130
0!
b1 "
b1 ?
b11111111111111111111111111111111 0
b11111111111111111111111111111111 3
b1010 /
b1010 2
#140
b10111011101110111011101110111011 "
b10111011101110111011101110111011 ?
b1111 .
b1111 1
b10111011101110111011101110111011 0
b10111011101110111011101110111011 3
b10101010101010101010101010101010 /
b10101010101010101010101010101010 2
#150
bx "
bx ?
b1010 .
b1010 1
#180
