$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 f clk $end
  $var wire 1 g rst_n $end
  $var wire 32 h debug_reg_x0 [31:0] $end
  $var wire 32 i debug_reg_x1 [31:0] $end
  $var wire 32 j debug_reg_x2 [31:0] $end
  $var wire 32 k debug_reg_x3 [31:0] $end
  $var wire 32 l debug_reg_x4 [31:0] $end
  $var wire 32 m debug_reg_x5 [31:0] $end
  $var wire 32 n debug_reg_x6 [31:0] $end
  $var wire 32 o debug_reg_x7 [31:0] $end
  $var wire 32 p debug_reg_x10 [31:0] $end
  $var wire 32 q debug_data_mem_0 [31:0] $end
  $scope module single_cycle_processor $end
   $var wire 1 f clk $end
   $var wire 1 g rst_n $end
   $var wire 32 h debug_reg_x0 [31:0] $end
   $var wire 32 i debug_reg_x1 [31:0] $end
   $var wire 32 j debug_reg_x2 [31:0] $end
   $var wire 32 k debug_reg_x3 [31:0] $end
   $var wire 32 l debug_reg_x4 [31:0] $end
   $var wire 32 m debug_reg_x5 [31:0] $end
   $var wire 32 n debug_reg_x6 [31:0] $end
   $var wire 32 o debug_reg_x7 [31:0] $end
   $var wire 32 p debug_reg_x10 [31:0] $end
   $var wire 32 q debug_data_mem_0 [31:0] $end
   $var wire 32 # pc_current [31:0] $end
   $var wire 32 $ pc_next [31:0] $end
   $var wire 32 % instruction [31:0] $end
   $var wire 32 & read_data1 [31:0] $end
   $var wire 32 ' read_data2 [31:0] $end
   $var wire 32 ( immediate [31:0] $end
   $var wire 32 ) alu_op1 [31:0] $end
   $var wire 32 * alu_op2 [31:0] $end
   $var wire 32 + alu_result [31:0] $end
   $var wire 1 , alu_zero $end
   $var wire 32 - mem_read_data [31:0] $end
   $var wire 32 . reg_write_data [31:0] $end
   $var wire 1 / reg_write_en $end
   $var wire 2 0 mem_to_reg [1:0] $end
   $var wire 1 1 mem_read_en $end
   $var wire 1 2 mem_write_en $end
   $var wire 2 3 alu_src_b [1:0] $end
   $var wire 4 4 alu_op [3:0] $end
   $var wire 2 5 pc_src [1:0] $end
   $var wire 1 6 branch $end
   $var wire 1 7 jump $end
   $var wire 7 8 opcode [6:0] $end
   $var wire 5 9 rd_addr [4:0] $end
   $var wire 3 : funct3 [2:0] $end
   $var wire 5 ; rs1_addr [4:0] $end
   $var wire 5 < rs2_addr [4:0] $end
   $var wire 7 = funct7 [6:0] $end
   $var wire 7 r OPCODE_JAL [6:0] $end
   $var wire 7 s OPCODE_JALR [6:0] $end
   $var wire 7 t OPCODE_AUIPC [6:0] $end
   $var wire 7 u OPCODE_BRANCH [6:0] $end
   $var wire 2 v PC_SRC_PC_PLUS_4 [1:0] $end
   $var wire 2 w PC_SRC_BRANCH [1:0] $end
   $var wire 2 x PC_SRC_JUMP [1:0] $end
   $var wire 2 v MEM_TO_REG_ALU_RESULT [1:0] $end
   $var wire 2 w MEM_TO_REG_MEM_DATA [1:0] $end
   $var wire 2 x MEM_TO_REG_PC_PLUS_4 [1:0] $end
   $var wire 32 > branch_target_addr [31:0] $end
   $var wire 32 > jal_target_addr [31:0] $end
   $var wire 32 ? jalr_target_addr [31:0] $end
   $scope module i_alu $end
    $var wire 32 ) op1_i [31:0] $end
    $var wire 32 * op2_i [31:0] $end
    $var wire 4 4 alu_op_i [3:0] $end
    $var wire 32 + alu_result_o [31:0] $end
    $var wire 1 , zero_o $end
    $var wire 4 y ALU_ADD [3:0] $end
    $var wire 4 z ALU_SUB [3:0] $end
    $var wire 4 { ALU_AND [3:0] $end
    $var wire 4 | ALU_OR [3:0] $end
    $var wire 4 } ALU_XOR [3:0] $end
    $var wire 4 ~ ALU_SLL [3:0] $end
    $var wire 4 !! ALU_SRL [3:0] $end
    $var wire 4 "! ALU_SRA [3:0] $end
    $var wire 4 #! ALU_SLT [3:0] $end
    $var wire 4 $! ALU_SLTU [3:0] $end
    $var wire 4 %! ALU_COPY_B [3:0] $end
   $upscope $end
   $scope module i_control $end
    $var wire 7 8 opcode_i [6:0] $end
    $var wire 3 : funct3_i [2:0] $end
    $var wire 7 = funct7_i [6:0] $end
    $var wire 1 / reg_write_en_o $end
    $var wire 2 0 mem_to_reg_o [1:0] $end
    $var wire 1 1 mem_read_en_o $end
    $var wire 1 2 mem_write_en_o $end
    $var wire 2 3 alu_src_b_o [1:0] $end
    $var wire 4 4 alu_op_o [3:0] $end
    $var wire 2 5 pc_src_o [1:0] $end
    $var wire 1 6 branch_o $end
    $var wire 1 7 jump_o $end
    $var wire 7 &! OPCODE_R_TYPE [6:0] $end
    $var wire 7 '! OPCODE_IMM [6:0] $end
    $var wire 7 (! OPCODE_LOAD [6:0] $end
    $var wire 7 )! OPCODE_STORE [6:0] $end
    $var wire 7 u OPCODE_BRANCH [6:0] $end
    $var wire 7 s OPCODE_JALR [6:0] $end
    $var wire 7 r OPCODE_JAL [6:0] $end
    $var wire 7 *! OPCODE_LUI [6:0] $end
    $var wire 7 t OPCODE_AUIPC [6:0] $end
    $var wire 3 +! FUNCT3_ADD_SUB [2:0] $end
    $var wire 3 ,! FUNCT3_SLL [2:0] $end
    $var wire 3 -! FUNCT3_SLT [2:0] $end
    $var wire 3 .! FUNCT3_SLTU [2:0] $end
    $var wire 3 /! FUNCT3_XOR [2:0] $end
    $var wire 3 0! FUNCT3_SRL_SRA [2:0] $end
    $var wire 3 1! FUNCT3_OR [2:0] $end
    $var wire 3 2! FUNCT3_AND [2:0] $end
    $var wire 7 3! FUNCT7_SUB [6:0] $end
    $var wire 4 y ALU_ADD [3:0] $end
    $var wire 4 z ALU_SUB [3:0] $end
    $var wire 4 { ALU_AND [3:0] $end
    $var wire 4 | ALU_OR [3:0] $end
    $var wire 4 } ALU_XOR [3:0] $end
    $var wire 4 ~ ALU_SLL [3:0] $end
    $var wire 4 !! ALU_SRL [3:0] $end
    $var wire 4 "! ALU_SRA [3:0] $end
    $var wire 4 #! ALU_SLT [3:0] $end
    $var wire 4 $! ALU_SLTU [3:0] $end
    $var wire 4 %! ALU_COPY_B [3:0] $end
    $var wire 2 v PC_SRC_PC_PLUS_4 [1:0] $end
    $var wire 2 w PC_SRC_BRANCH [1:0] $end
    $var wire 2 x PC_SRC_JUMP [1:0] $end
    $var wire 2 v MEM_TO_REG_ALU_RESULT [1:0] $end
    $var wire 2 w MEM_TO_REG_MEM_DATA [1:0] $end
    $var wire 2 x MEM_TO_REG_PC_PLUS_4 [1:0] $end
   $upscope $end
   $scope module i_dmem $end
    $var wire 1 f clk $end
    $var wire 1 g rst_n $end
    $var wire 32 + addr_i [31:0] $end
    $var wire 32 ' write_data_i [31:0] $end
    $var wire 1 1 mem_read_en_i $end
    $var wire 1 2 mem_write_en_i $end
    $var wire 32 - read_data_o [31:0] $end
    $var wire 32 4! MEM_SIZE [31:0] $end
    $var wire 32 @ i [31:0] $end
   $upscope $end
   $scope module i_imem $end
    $var wire 32 # addr_i [31:0] $end
    $var wire 32 % instr_o [31:0] $end
    $var wire 32 4! MEM_SIZE [31:0] $end
   $upscope $end
   $scope module i_immgen $end
    $var wire 32 % instruction_i [31:0] $end
    $var wire 32 ( imm_o [31:0] $end
    $var wire 7 *! OPCODE_LUI [6:0] $end
    $var wire 7 t OPCODE_AUIPC [6:0] $end
    $var wire 7 r OPCODE_JAL [6:0] $end
    $var wire 7 s OPCODE_JALR [6:0] $end
    $var wire 7 u OPCODE_BRANCH [6:0] $end
    $var wire 7 (! OPCODE_LOAD [6:0] $end
    $var wire 7 )! OPCODE_STORE [6:0] $end
    $var wire 7 '! OPCODE_IMM [6:0] $end
    $var wire 12 A i_imm_11_0_raw [11:0] $end
    $var wire 7 = s_imm_11_5_raw [6:0] $end
    $var wire 5 9 s_imm_4_0_raw [4:0] $end
    $var wire 13 B b_imm_raw [12:0] $end
    $var wire 21 C j_imm_raw [20:0] $end
    $var wire 12 D s_imm_val [11:0] $end
    $var wire 7 8 opcode [6:0] $end
   $upscope $end
   $scope module i_pc $end
    $var wire 1 f clk $end
    $var wire 1 g rst_n $end
    $var wire 32 $ pc_next_i [31:0] $end
    $var wire 1 5! pc_write_en_i $end
    $var wire 32 # pc_o [31:0] $end
   $upscope $end
   $scope module i_regfile $end
    $var wire 1 f clk $end
    $var wire 1 g rst_n $end
    $var wire 5 ; rs1_addr_i [4:0] $end
    $var wire 5 < rs2_addr_i [4:0] $end
    $var wire 5 9 rd_addr_i [4:0] $end
    $var wire 32 . rd_data_i [31:0] $end
    $var wire 1 / reg_write_en_i $end
    $var wire 32 & rs1_data_o [31:0] $end
    $var wire 32 ' rs2_data_o [31:0] $end
    $var wire 32 E registers[0] [31:0] $end
    $var wire 32 F registers[1] [31:0] $end
    $var wire 32 G registers[2] [31:0] $end
    $var wire 32 H registers[3] [31:0] $end
    $var wire 32 I registers[4] [31:0] $end
    $var wire 32 J registers[5] [31:0] $end
    $var wire 32 K registers[6] [31:0] $end
    $var wire 32 L registers[7] [31:0] $end
    $var wire 32 M registers[8] [31:0] $end
    $var wire 32 N registers[9] [31:0] $end
    $var wire 32 O registers[10] [31:0] $end
    $var wire 32 P registers[11] [31:0] $end
    $var wire 32 Q registers[12] [31:0] $end
    $var wire 32 R registers[13] [31:0] $end
    $var wire 32 S registers[14] [31:0] $end
    $var wire 32 T registers[15] [31:0] $end
    $var wire 32 U registers[16] [31:0] $end
    $var wire 32 V registers[17] [31:0] $end
    $var wire 32 W registers[18] [31:0] $end
    $var wire 32 X registers[19] [31:0] $end
    $var wire 32 Y registers[20] [31:0] $end
    $var wire 32 Z registers[21] [31:0] $end
    $var wire 32 [ registers[22] [31:0] $end
    $var wire 32 \ registers[23] [31:0] $end
    $var wire 32 ] registers[24] [31:0] $end
    $var wire 32 ^ registers[25] [31:0] $end
    $var wire 32 _ registers[26] [31:0] $end
    $var wire 32 ` registers[27] [31:0] $end
    $var wire 32 a registers[28] [31:0] $end
    $var wire 32 b registers[29] [31:0] $end
    $var wire 32 c registers[30] [31:0] $end
    $var wire 32 d registers[31] [31:0] $end
    $var wire 32 e i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000100 $
b00000000101000000000000010010011 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000001010 (
b00000000000000000000000000000000 )
b00000000000000000000000000001010 *
b00000000000000000000000000001010 +
0,
b00000000000000000000000000000000 -
b00000000000000000000000000001010 .
1/
b00 0
01
02
b01 3
b0000 4
b00 5
06
07
b0010011 8
b00001 9
b000 :
b00000 ;
b01010 <
b0000000 =
b00000000000000000000000000001010 >
b00000000000000000000000000001010 ?
b00000000000000000000000100000000 @
b000000001010 A
b0100000000000 B
b000000000000000001010 C
b000000000001 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000100000 e
0f
0g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b1101111 r
b1100111 s
b0010111 t
b1100011 u
b00 v
b01 w
b10 x
b0000 y
b0001 z
b0010 {
b0011 |
b0100 }
b0101 ~
b0110 !!
b0111 "!
b1000 #!
b1001 $!
b1111 %!
b0110011 &!
b0010011 '!
b0000011 (!
b0100011 )!
b0110111 *!
b000 +!
b001 ,!
b010 -!
b011 .!
b100 /!
b101 0!
b110 1!
b111 2!
b0100000 3!
b00000000000000000000000100000000 4!
15!
#10
1g
#15
b00000000000000000000000000000100 #
b00000000000000000000000000001000 $
b00000000010100001000000100010011 %
b00000000000000000000000000001010 &
b00000000000000000000000000000101 (
b00000000000000000000000000001010 )
b00000000000000000000000000000101 *
b00000000000000000000000000001111 +
b00000000000000000000000000001111 .
b00010 9
b00001 ;
b00101 <
b00000000000000000000000000001001 >
b00000000000000000000000000001110 ?
b000000000101 A
b0000000000010 B
b000001000100000000100 C
b000000000010 D
b00000000000000000000000000001010 F
1f
b00000000000000000000000000001010 i
#20
0f
#25
b00000000000000000000000000001000 #
b00000000000000000000000000001100 $
b00000000000100010000000110110011 %
b00000000000000000000000000001111 &
b00000000000000000000000000001010 '
b00000000000000000000000000000000 (
b00000000000000000000000000001111 )
b00000000000000000000000000001010 *
b00000000000000000000000000011001 +
b00000000000000000000000000011001 .
b00 3
b0110011 8
b00011 9
b00010 ;
b00001 <
b00000000000000000000000000001000 >
b000000000001 A
b0100000000010 B
b000010000100000000000 C
b000000000011 D
b00000000000000000000000000001111 G
1f
b00000000000000000000000000001111 j
#30
0f
#35
b00000000000000000000000000001100 #
b00000000000000000000000000010000 $
b00000001010000000000001000010011 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000010100 (
b00000000000000000000000000000000 )
b00000000000000000000000000010100 *
b00000000000000000000000000010100 +
b00000000000000000000000000010100 .
b01 3
b0010011 8
b00100 9
b00000 ;
b10100 <
b00000000000000000000000000100000 >
b00000000000000000000000000010100 ?
b000000010100 A
b0000000000100 B
b000000000000000010100 C
b000000000100 D
b00000000000000000000000000011001 H
1f
b00000000000000000000000000011001 k
#40
0f
#45
b00000000000000000000000000010000 #
b00000000000000000000000000010100 $
b00000000010000000000000000100011 %
b00000000000000000000000000010100 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
1,
b00000000000000000000000000000000 .
0/
12
b0100011 8
b00000 9
b00100 <
b00000000000000000000000000010000 >
b00000000000000000000000000000000 ?
b000000000100 A
b0000000000000 B
b000000000000000000100 C
b000000000000 D
b00000000000000000000000000010100 I
1f
b00000000000000000000000000010100 l
#50
0f
#55
b00000000000000000000000000010100 #
b00000000000000000000000000011000 $
b00000110010000000000001100010011 %
b00000000000000000000000001100100 (
b00000000000000000000000001100100 *
b00000000000000000000000001100100 +
0,
b00000000000000000000000001100100 .
1/
02
b0010011 8
b00110 9
b0000011 =
b00000000000000000000000001111000 >
b00000000000000000000000001100100 ?
b000001100100 A
b0000001100110 B
b000000000000001100100 C
b000001100110 D
1f
b00000000000000000000000000010100 q
#60
0f
#65
b00000000000000000000000000011000 #
b00000000000000000000000000101100 $
b00000001010000101000101001100011 %
b00000000000000000000000000000000 '
b00000000000000000000000000010100 (
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
1,
b00000000000000000000000000000000 .
0/
b00 3
b0001 4
b01 5
16
b1100011 8
b10100 9
b00101 ;
b10100 <
b0000000 =
b00000000000000000000000000101100 >
b00000000000000000000000000010100 ?
b000000010100 A
b0000000010100 B
b000101000000000010100 C
b000000010100 D
b00000000000000000000000001100100 K
1f
b00000000000000000000000001100100 n
#70
0f
#75
b00000000000000000000000000101100 #
b00000000000000000000000000110000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 (
b0000 4
b00 5
06
b0000000 8
b00000 9
b00000 ;
b00000 <
b00000000000000000000000000000000 ?
b000000000000 A
b0000000000000 B
b000000000000000000000 C
b000000000000 D
1f
#80
0f
#85
b00000000000000000000000000110000 #
b00000000000000000000000000110100 $
b00000000000000000000000000110000 >
1f
#90
0f
#95
b00000000000000000000000000110100 #
b00000000000000000000000000111000 $
b00000000000000000000000000110100 >
1f
#100
0f
#105
b00000000000000000000000000111000 #
b00000000000000000000000000111100 $
b00000000000000000000000000111000 >
1f
#110
0f
#115
b00000000000000000000000000111100 #
b00000000000000000000000001000000 $
b00000000000000000000000000111100 >
1f
#120
0f
#125
b00000000000000000000000001000000 #
b00000000000000000000000001000100 $
b00000000000000000000000001000000 >
1f
#130
0f
#135
b00000000000000000000000001000100 #
b00000000000000000000000001001000 $
b00000000000000000000000001000100 >
1f
#140
0f
#145
b00000000000000000000000001001000 #
b00000000000000000000000001001100 $
b00000000000000000000000001001000 >
1f
#150
0f
#155
b00000000000000000000000001001100 #
b00000000000000000000000001010000 $
b00000000000000000000000001001100 >
1f
#160
0f
#165
b00000000000000000000000001010000 #
b00000000000000000000000001010100 $
b00000000000000000000000001010000 >
1f
#170
0f
#175
b00000000000000000000000001010100 #
b00000000000000000000000001011000 $
b00000000000000000000000001010100 >
1f
#180
0f
#185
b00000000000000000000000001011000 #
b00000000000000000000000001011100 $
b00000000000000000000000001011000 >
1f
#190
0f
#195
b00000000000000000000000001011100 #
b00000000000000000000000001100000 $
b00000000000000000000000001011100 >
1f
#200
0f
#205
b00000000000000000000000001100000 #
b00000000000000000000000001100100 $
b00000000000000000000000001100000 >
1f
#210
0f
#215
b00000000000000000000000001100100 #
b00000000000000000000000001101000 $
b00000000000000000000000001100100 >
1f
#220
0f
#225
b00000000000000000000000001101000 #
b00000000000000000000000001101100 $
b00000000000000000000000001101000 >
1f
#230
0f
#235
b00000000000000000000000001101100 #
b00000000000000000000000001110000 $
b00000000000000000000000001101100 >
1f
#240
0f
#245
b00000000000000000000000001110000 #
b00000000000000000000000001110100 $
b00000000000000000000000001110000 >
1f
#250
0f
#255
b00000000000000000000000001110100 #
b00000000000000000000000001111000 $
b00000000000000000000000001110100 >
1f
#260
0f
#265
b00000000000000000000000001111000 #
b00000000000000000000000001111100 $
b00000000000000000000000001111000 >
1f
#270
0f
#275
b00000000000000000000000001111100 #
b00000000000000000000000010000000 $
b00000000000000000000000001111100 >
1f
#280
0f
#285
b00000000000000000000000010000000 #
b00000000000000000000000010000100 $
b00000000000000000000000010000000 >
1f
#290
0f
#295
b00000000000000000000000010000100 #
b00000000000000000000000010001000 $
b00000000000000000000000010000100 >
1f
#300
0f
#305
b00000000000000000000000010001000 #
b00000000000000000000000010001100 $
b00000000000000000000000010001000 >
1f
#310
0f
