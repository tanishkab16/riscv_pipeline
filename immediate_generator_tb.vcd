$date
	Tue Jul 29 04:37:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module immediate_generator_tb $end
$var wire 32 ! imm_o [31:0] $end
$var reg 32 " instruction_i [31:0] $end
$scope module dut $end
$var wire 32 # instruction_i [31:0] $end
$var wire 12 $ s_imm_val [11:0] $end
$var wire 5 % s_imm_4_0_raw [4:0] $end
$var wire 7 & s_imm_11_5_raw [6:0] $end
$var wire 7 ' opcode [6:0] $end
$var wire 21 ( j_imm_raw [20:0] $end
$var wire 12 ) i_imm_11_0_raw [11:0] $end
$var wire 13 * b_imm_raw [12:0] $end
$var parameter 7 + OPCODE_AUIPC $end
$var parameter 7 , OPCODE_BRANCH $end
$var parameter 7 - OPCODE_IMM $end
$var parameter 7 . OPCODE_JAL $end
$var parameter 7 / OPCODE_JALR $end
$var parameter 7 0 OPCODE_LOAD $end
$var parameter 7 1 OPCODE_LUI $end
$var parameter 7 2 OPCODE_STORE $end
$var reg 32 3 imm_o [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 2
b110111 1
b11 0
b1100111 /
b1101111 .
b10011 -
b1100011 ,
b10111 +
$end
#0
$dumpvars
b1 3
b100000000000 *
b1 )
b100000000000 (
b10011 '
b0 &
b1 %
b1 $
b100000000000010010011 #
b100000000000010010011 "
b1 !
$end
#10000
b11111111111111111111111111111111 !
b11111111111111111111111111111111 3
b111111111111 )
b111111100001 $
b1111111 &
b1111111100000 *
b100000000111111111110 (
b11111111111100000000000010010011 "
b11111111111100000000000010010011 #
#20000
b1 !
b1 3
b1 )
b1 $
b0 &
b100000000000 *
b1000100000000000 (
b100011 '
b100001000000010100011 "
b100001000000010100011 #
#30000
b11111111111111111111111111111111 !
b11111111111111111111111111111111 3
b111111111111 )
b1111111 &
b111111111111 $
b11111 %
b1111111111110 *
b100001000111111111110 (
b11111111111100001000111110100011 "
b11111111111100001000111110100011 #
#40000
b1100 !
b1100 3
b10 )
b0 &
b1100 $
b1100 %
b1100 *
b1000000000000010 (
b1100011 '
b1000001000011001100011 "
b1000001000011001100011 #
#50000
b11111111111111111111011111101100 !
b11111111111111111111011111101100 3
b111111111110 )
b111111101100 $
b1111111 &
b1011111101100 *
b100001000011111111110 (
b11111111111000001000011001100011 "
b11111111111000001000011001100011 #
#60000
b10010001101000101000000000000 !
b10010001101000101000000000000 3
b100100011 )
b1001 &
b100100001 $
b1 %
b100100100000 *
b1000101100100100010 (
b110111 '
b10010001101000101000010110111 "
b10010001101000101000010110111 #
#70000
b1000 !
b1000 3
b1000 )
b0 &
b0 $
b0 %
b0 *
b1000 (
b1101111 '
b100000000000000001101111 "
b100000000000000001101111 #
#80000
b11111111111100000000111111111110 !
b11111111111100000000111111111110 3
b111111111111 )
b111111100000 $
b1111111 &
b1011111100000 *
b100000000111111111110 (
b11111111111100000000000001101111 "
b11111111111100000000000001101111 #
#100000
